import logging
import random
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
CHARACTERS = {
    "player": {
        "health": 100,
        "inventory": [],
        "damage": (10, 20),
        "defense": 5,
    },
    "dragon": {
        "health": 180,
        "damage": (20, 35),
        "defense": 12,
    },
    "snake": {
        "health": 70,
        "damage": (10, 18),
        "defense": 4,
    },
    "goblin": {
        "health": 90,
        "damage": (8, 20),
        "defense": 5,
    },
    "shadow_wraith": {
        "health": 120,
        "damage": (18, 30),
        "defense": 10,
    }
}

# –õ–æ–∫–∞—Ü–∏–∏ –∏ –∫–≤–µ—Å—Ç—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Å—é–∂–µ—Ç–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
QUESTS = {
    "castle": {
        "name": "–ö–≤–µ—Å—Ç: –¢–∞–π–Ω—ã –¥—Ä–µ–≤–Ω–µ–≥–æ –∑–∞–º–∫–∞",
        "start_step": "start",
        "steps": {
            "start": {
                "text": "–í—ã —Å—Ç–æ–∏—Ç–µ –ø–µ—Ä–µ–¥ –≤–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞–º–∫–æ–º, –ø–æ–∫—Ä—ã—Ç—ã–º –¥—Ä–µ–≤–Ω–∏–º–∏ —Ä—É–Ω–∞–º–∏. –õ–µ–≥–µ–Ω–¥—ã –≥–ª–∞—Å—è—Ç, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Å–ø—Ä—è—Ç–∞–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, —Å–ø–æ—Å–æ–±–Ω—ã–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—É–¥—å–±—É –º–∏—Ä–∞. –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–µ—Ç–µ?",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞",
                    "‚¨ÖÔ∏è –û–±–æ–π—Ç–∏ –∑–∞–º–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ç–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞",
                    "üî• –í—ã–∑–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–µ–≥–æ –¥—É—Ö–∞ –Ω–∞ –ø–æ–º–æ—â—å",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
            "üî• –í—ã–∑–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–µ–≥–æ –¥—É—Ö–∞ –Ω–∞ –ø–æ–º–æ—â—å": {
                "text": "–í—ã –Ω–∞–ø–µ–≤–∞–µ—Ç–µ –¥—Ä–µ–≤–Ω–∏–π –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å–Ω—ã–π –≥–∏–º–Ω. –ò–∑ —Ç—É–º–∞–Ω–∞ –≤—ã—Ö–æ–¥–∏—Ç –¥—É—Ö. –û–Ω –æ–±–µ—â–∞–µ—Ç –ø–æ–º–æ—â—å, –Ω–æ –ø—Ä–æ—Å–∏—Ç –≤–∑–∞–º–µ–Ω —á–∞—Å—Ç–∏—Ü—É –≤–∞—à–µ–π —Å–∏–ª—ã.",
                "options": [
                    "–û—Ç–¥–∞—Ç—å —á–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è –¥—É—Ö—É",
                    "–û—Ç–∫–∞–∑–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
                "effect_choices": {
                    "–û—Ç–¥–∞—Ç—å —á–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è –¥—É—Ö—É": {"health": -30, "damage_bonus": 15},
                    "–û—Ç–∫–∞–∑–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ": {}
                }
            },
            "–û—Ç–¥–∞—Ç—å —á–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è –¥—É—Ö—É": {
                "text": "–î—É—Ö –ø—Ä–∏–Ω—è–ª –≤–∞—à—É –∂–µ—Ä—Ç–≤—É. –í–∞—à —É—Ä–æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Å–∏–ª–æ–π.",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞",
                    "‚¨ÖÔ∏è –û–±–æ–π—Ç–∏ –∑–∞–º–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ç–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
            "–û—Ç–∫–∞–∑–∞—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ": {
                "text": "–ë–µ–∑ –ø–æ–º–æ—â–∏ –¥—É—Ö–∞ –ø—É—Ç—å –±—É–¥–µ—Ç —Ç—Ä—É–¥–Ω–µ–µ, –Ω–æ –≤—ã –ø–æ–ª–Ω—ã —Ä–µ—à–∏–º–æ—Å—Ç–∏.",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞",
                    "‚¨ÖÔ∏è –û–±–æ–π—Ç–∏ –∑–∞–º–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ç–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
            "‚û°Ô∏è –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞": {
                "text": "–í–Ω—É—Ç—Ä–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —Ä–æ—Å–∫–æ—à–Ω—ã–π –∑–∞–ª, –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç –∑–∞–≥–∞–¥–æ—á–Ω—ã–π –∞–ª—Ç–∞—Ä—å. –í–Ω–µ–∑–∞–ø–Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –æ—Ö—Ä–∞–Ω–Ω–∏–∫ ‚Äì —Ç–µ–Ω—å, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –±–æ–π!",
                "options": ["‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å —Ç–µ–Ω—å—é", "üèÉ‚Äç‚ôÇÔ∏è –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "battle": "shadow_wraith"
            },
            "‚¨ÖÔ∏è –û–±–æ–π—Ç–∏ –∑–∞–º–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ç–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞": {
                "text": "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Å–∫—Ä—ã—Ç—É—é –¥–≤–µ—Ä—å, –ø–æ–∫—Ä—ã—Ç—É—é –ø–∞—É—Ç–∏–Ω–æ–π –¥—Ä–µ–≤–Ω–∏—Ö –≤—Ä–µ–º—ë–Ω. –û—Ç–∫—Ä—ã—Ç—å –µ—ë?",
                "options": ["üîì –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—Ö–æ–¥—É", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
            },
            "üîì –û—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å": {
                "text": "–ó–∞ –¥–≤–µ—Ä—å—é –≥–ª—É–±–æ–∫–∏–π –ø–æ–¥–∑–µ–º–Ω—ã–π —Ç–æ–Ω–Ω–µ–ª—å. –í–∏–¥–Ω—ã —Ç—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Å–≤–µ—Ç–ª—ã–π –∫–æ—Ä–∏–¥–æ—Ä, —Ç–µ–º–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –∏ –ª–µ—Å—Ç–Ω–∏—Ü–∞ –≤–Ω–∏–∑.",
                "options": ["‚û°Ô∏è –°–≤–µ—Ç–ª—ã–π –∫–æ—Ä–∏–¥–æ—Ä", "üåë –¢–µ–º–Ω—ã–π –ø—Ä–æ—Ö–æ–¥", "‚¨áÔ∏è –õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤–Ω–∏–∑", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
            },
            "‚û°Ô∏è –°–≤–µ—Ç–ª—ã–π –∫–æ—Ä–∏–¥–æ—Ä": {
                "text": "–ö–æ—Ä–∏–¥–æ—Ä –≤–µ–¥—ë—Ç –∫ –¥—Ä–µ–≤–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.",
                "options": ["üìñ –í–∑—è—Ç—å –∫–Ω–∏–≥—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç–æ–Ω–Ω–µ–ª—å", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
            },
            "üìñ –í–∑—è—Ç—å –∫–Ω–∏–≥—É –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π": {
                "text": "–ö–Ω–∏–≥–∞ –¥–∞–ª–∞ –≤–∞–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è, –≤–∞—à —É—Ä–æ–Ω –∏ –∑–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω—ã.",
                "options": ["‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç–æ–Ω–Ω–µ–ª—å", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "effect": {"damage_bonus": 10, "defense_bonus": 10, "items": ["–ö–Ω–∏–≥–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π"]},
            },
            "üåë –¢–µ–º–Ω—ã–π –ø—Ä–æ—Ö–æ–¥": {
                "text": "–í —Ç–µ–º–Ω–æ—Ç–µ –≤–∞—Å –∞—Ç–∞–∫—É—é—Ç –≥–æ–±–ª–∏–Ω—ã!",
                "options": ["‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è", "üèÉ‚Äç‚ôÇÔ∏è –£–±–µ–∂–∞—Ç—å"],
                "battle": "goblin"
            },
            "‚¨áÔ∏è –õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤–Ω–∏–∑": {
                "text": "–õ–µ—Å—Ç–Ω–∏—Ü–∞ –≤–µ–¥–µ—Ç –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ, –≥–¥–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥—Ä–∞–∫–æ–Ω, –æ—Ö—Ä–∞–Ω—è—é—â–∏–π –≤–µ–ª–∏–∫–∏–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç.",
                "options": ["‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –¥—Ä–∞–∫–æ–Ω–æ–º", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ç–æ–Ω–Ω–µ–ª—å", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "battle": "dragon"
            },
            "üèÉ‚Äç‚ôÇÔ∏è –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è": {
                "text": "–¢–µ–Ω—å –∑–∞–º–µ—Ç–∏–ª–∞ –≤–∞—Å –∏ –Ω–∞–Ω–µ—Å–ª–∞ –≤–Ω–µ–∑–∞–ø–Ω—ã–π —É–¥–∞—Ä. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —á–∞—Å—Ç—å –∑–¥–æ—Ä–æ–≤—å—è.",
                "options": ["‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è", "üèÉ‚Äç‚ôÇÔ∏è –£–±–µ–∂–∞—Ç—å", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "effect": {"health": -20},
            },
            "‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å —Ç–µ–Ω—å—é": {
                "text": "–ë–∏—Ç–≤–∞ —Å —Ç–µ–Ω—å—é –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!",
                "options": ["–ê—Ç–∞–∫–æ–≤–∞—Ç—å", "–ó–∞—â–∏—Ç–∏—Ç—å—Å—è", "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–±–µ–∂–∞—Ç—å"],
                "battle": "shadow_wraith"
            },
            "‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è": {
                "text": "–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å!",
                "options": ["–ê—Ç–∞–∫–æ–≤–∞—Ç—å", "–ó–∞—â–∏—Ç–∏—Ç—å—Å—è", "–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–±–µ–∂–∞—Ç—å"],
            },
            "üèÉ‚Äç‚ôÇÔ∏è –£–±–µ–∂–∞—Ç—å": {
                "text": "–í—ã —Å —Ç—Ä—É–¥–æ–º —Å–ø–∞—Å–ª–∏—Å—å, –ø–æ—Ç–µ—Ä—è–≤ –∑–¥–æ—Ä–æ–≤—å–µ.",
                "options": ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "effect": {"health": -30}
            },
            "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": {
                "text": "–í—ã —É –≤—Ö–æ–¥–∞ –≤ –∑–∞–º–æ–∫. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω—ã–µ –≤–æ—Ä–æ—Ç–∞",
                    "‚¨ÖÔ∏è –û–±–æ–π—Ç–∏ –∑–∞–º–æ–∫ –≤ –ø–æ–∏—Å–∫–∞—Ö —Ç–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞",
                    "üî• –í—ã–∑–≤–∞—Ç—å –¥—Ä–µ–≤–Ω–µ–≥–æ –¥—É—Ö–∞ –Ω–∞ –ø–æ–º–æ—â—å",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
        },
    },
    "cave": {
        "name": "–ö–≤–µ—Å—Ç: –ó–∞–≥–∞–¥–∫–∏ —Ç—ë–º–Ω–æ–π –ø–µ—â–µ—Ä—ã",
        "start_step": "start",
        "steps": {
            "start": {
                "text": "–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ —Ç–µ–º–Ω–æ–º—É –≤—Ö–æ–¥—É –≤ –ø–µ—â–µ—Ä—É. –õ–µ–≥–µ–Ω–¥—ã –≥–ª–∞—Å—è—Ç, —á—Ç–æ –≤ –Ω–µ–π —Å–ø—Ä—è—Ç–∞–Ω —Å–≤–∏—Ç–æ–∫ –º—É–¥—Ä–æ—Å—Ç–∏. –ö–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã –ø—Ä–µ–¥–ø—Ä–∏–º–µ—Ç–µ?",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ –≤ –ø–µ—â–µ—Ä—É",
                    "üî¶ –í–∫–ª—é—á–∏—Ç—å —Ñ–∞–∫–µ–ª",
                    "‚¨ÖÔ∏è –û—Ç–æ–π—Ç–∏ –Ω–∞–∑–∞–¥",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
            "üî¶ –í–∫–ª—é—á–∏—Ç—å —Ñ–∞–∫–µ–ª": {
                "text": "–° –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Ñ–∞–∫–µ–ª–æ–º –≤—ã –≤–∏–¥–∏—Ç–µ —Ç–µ–º–Ω—ã–µ —Ç–µ–Ω–∏, –¥–≤–∏–∂—É—â–∏–µ—Å—è –≤ –≥–ª—É–±–∏–Ω–∞—Ö –ø–µ—â–µ—Ä—ã.",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ –≤ –ø–µ—â–µ—Ä—É",
                    "üëÇ –ü—Ä–∏—Å–ª—É—à–∞—Ç—å—Å—è –∫ –∑–≤—É–∫–∞–º",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
                "effect": {"damage_bonus": 5}
            },
            "‚û°Ô∏è –í–æ–π—Ç–∏ –≤ –ø–µ—â–µ—Ä—É": {
                "text": "–ì–ª—É–±–∂–µ –≤ –ø–µ—â–µ—Ä–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Ç—Ä–∏ –ø—Ä–æ—Ö–æ–¥–∞: –ª–µ–≤—ã–π —Å —à–µ–ª–µ—Å—Ç–æ–º –ª–∏—Å—Ç–≤—ã, –ø—Ä–∞–≤—ã–π —Å —Ö–æ–ª–æ–¥–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º –∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å –º–µ—Ä—Ü–∞–Ω–∏–µ–º.",
                "options": [
                    "üçÉ –õ–µ–≤—ã–π –ø—Ä–æ—Ö–æ–¥",
                    "‚ùÑÔ∏è –ü—Ä–∞–≤—ã–π –ø—Ä–æ—Ö–æ–¥",
                    "‚ú® –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
            "üçÉ –õ–µ–≤—ã–π –ø—Ä–æ—Ö–æ–¥": {
                "text": "–í—ã –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ –ø–æ–¥–∑–µ–º–Ω—ã–π —Å–∞–¥ —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏. –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏—Å—Ü–µ–ª—è—Ç—å.",
                "options": ["–í–∑—è—Ç—å —Ü–≤–µ—Ç–æ–∫", "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
            },
            "–í–∑—è—Ç—å —Ü–≤–µ—Ç–æ–∫": {
                "text": "–¶–≤–µ—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 40 –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏.",
                "options": ["–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "effect": {"items": ["–õ–µ—á–µ–±–Ω—ã–π —Ü–≤–µ—Ç–æ–∫"]},
            },
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –¥–∞–ª—å—à–µ": {
                "text": "–í—ã –Ω–∞—Ç—ã–∫–∞–µ—Ç–µ—Å—å –Ω–∞ –≥–æ–±–ª–∏–Ω–∞. –û–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∞—Å –æ–≥—Ä–∞–±–∏—Ç—å.",
                "options": ["‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è", "üèÉ‚Äç‚ôÇÔ∏è –£–±–µ–∂–∞—Ç—å"],
                "battle": "goblin",
            },
            "‚ùÑÔ∏è –ü—Ä–∞–≤—ã–π –ø—Ä–æ—Ö–æ–¥": {
                "text": "–ü—Ä–æ—Ö–æ–¥ –≤–µ–¥–µ—Ç –∫ –ª–µ–¥—è–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ, –≥–¥–µ –æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–º–µ–π –ª–µ–¥—è–Ω–æ–π –¥—Ä–∞–∫–æ–Ω.",
                "options": ["‚öîÔ∏è –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –ª–µ–¥—è–Ω—ã–º –¥—Ä–∞–∫–æ–Ω–æ–º", "‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "battle": "dragon",  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å, —á—Ç–æ–±—ã –±—ã–ª –ª–µ–¥—è–Ω–æ–π –¥—Ä–∞–∫–æ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
            },
            "‚ú® –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥": {
                "text": "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –¥—Ä–µ–≤–Ω–∏–π –∞–ª—Ç–∞—Ä—å —Å —Ä—É–Ω–∞–º–∏. –í—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –º–æ–≥—É—â–µ—Å—Ç–≤–µ–Ω–Ω—É—é —ç–Ω–µ—Ä–≥–∏—é. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–ª—Ç–∞—Ä—å?",
                "options": [
                    "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–ª—Ç–∞—Ä—å",
                    "‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
            "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–ª—Ç–∞—Ä—å": {
                "text": "–ê–ª—Ç–∞—Ä—å –¥–∞—Ä—É–µ—Ç –≤–∞–º –º–∞–≥–∏—á–µ—Å–∫—É—é —â–∏—Ç–æ–≤—É—é –∞—É—Ä—É! –ó–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 20.",
                "options": ["‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
                "effect": {"defense_bonus": 20},
            },
            "‚ùå –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ": {
                "text": "–í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ —Ä–∏—Å–∫–æ–≤–∞—Ç—å. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                "options": ["‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–∑–≤–∏–ª–∫–µ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
            },
            "‚¨ÖÔ∏è –û—Ç–æ–π—Ç–∏ –Ω–∞–∑–∞–¥": {
                "text": "–í—ã —Ä–µ—à–∞–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –¥–æ–º–æ–π, –Ω–µ —Ä–∏—Å–∫—É—è.",
                "options": ["üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"],
            },
            "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ": {
                "text": "–í—ã —É –≤—Ö–æ–¥–∞ –≤ –ø–µ—â–µ—Ä—É. –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                "options": [
                    "‚û°Ô∏è –í–æ–π—Ç–∏ –≤ –ø–µ—â–µ—Ä—É",
                    "üî¶ –í–∫–ª—é—á–∏—Ç—å —Ñ–∞–∫–µ–ª",
                    "‚¨ÖÔ∏è –û—Ç–æ–π—Ç–∏ –Ω–∞–∑–∞–¥",
                    "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
                ],
            },
        },
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    user_data.clear()
    user_data["health"] = CHARACTERS["player"]["health"]
    user_data["inventory"] = []
    user_data["damage_bonus"] = 0
    user_data["defense_bonus"] = 0

    keyboard = [[quest["name"]] for quest in QUESTS.values()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=reply_markup,
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_data = context.user_data

    if text == "üîô –ü—Ä–µ—Ä–≤–∞—Ç—å –∫–≤–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        user_data.clear()
        await start(update, context)
        return

    if "current_quest" not in user_data:
        for key, quest in QUESTS.items():
            if text == quest["name"]:
                user_data["current_quest"] = key
                user_data["current_step"] = quest["start_step"]
                await send_quest_step(update, user_data)
                return

        for quest in QUESTS.values():
            step = quest["steps"].get("start")
            if step and "effect_choices" in step and text in step["effect_choices"]:
                user_data["current_quest"] = "castle"
                eff = step["effect_choices"][text]
                if "health" in eff:
                    user_data["health"] = max(1, user_data.get("health", 100) + eff["health"])
                if "damage_bonus" in eff:
                    user_data["damage_bonus"] = user_data.get("damage_bonus", 0) + eff["damage_bonus"]
                user_data["current_step"] = text
                await update.message.reply_text(f"–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω. –ó–¥–æ—Ä–æ–≤—å–µ: {user_data['health']}, –£—Ä–æ–Ω –±–æ–Ω—É—Å: {user_data.get('damage_bonus', 0)}")
                await send_quest_step(update, user_data)
                return

        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–≤–µ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    current_quest = user_data["current_quest"]
    current_step_key = user_data.get("current_step")
    quest = QUESTS[current_quest]
    steps = quest["steps"]

    if current_step_key is None or current_step_key not in steps:
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
        user_data.clear()
        await start(update, context)
        return

    options = steps[current_step_key]["options"]
    if text not in options:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
        return

    step = steps[current_step_key]

    user_data["current_step"] = text

    if "effect" in step:
        effect = step["effect"]
        if "health" in effect:
            user_data["health"] += effect["health"]
            if user_data["health"] > 100:
                user_data["health"] = 100
            elif user_data["health"] <= 0:
                await update.message.reply_text("–í—ã –ø–æ–≥–∏–±–ª–∏. –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
                user_data.clear()
                await start(update, context)
                return
            await update.message.reply_text(f"–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ç–µ–ø–µ—Ä—å {user_data['health']}.")
        if "damage_bonus" in effect:
            user_data["damage_bonus"] = user_data.get("damage_bonus", 0) + effect["damage_bonus"]
            await update.message.reply_text(f"–í–∞—à —É—Ä–æ–Ω —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ {effect['damage_bonus']}.")
        if "defense_bonus" in effect:
            user_data["defense_bonus"] = user_data.get("defense_bonus", 0) + effect["defense_bonus"]
            await update.message.reply_text(f"–í–∞—à–∞ –∑–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {effect['defense_bonus']}.")
        if "items" in effect:
            user_data.setdefault("inventory", [])
            for item in effect["items"]:
                if item not in user_data["inventory"]:
                    user_data["inventory"].append(item)
            await update.message.reply_text(f"–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(effect['items'])}.")
        if "remove_items" in effect:
            for item in effect["remove_items"]:
                if item in user_data.get("inventory", []):
                    user_data["inventory"].remove(item)
            await update.message.reply_text(f"–ò–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —É–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(effect['remove_items'])}.")

    if "requires_item" in step:
        required = step["requires_item"]
        if required not in user_data.get("inventory", []):
            await update.message.reply_text(f"–î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç: {required}. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.")
            user_data["current_step"] = current_step_key
            return

    if "battle" in step:
        battle_enemy_key = step["battle"]
        if battle_enemy_key in CHARACTERS:
            battle_result = await battle(update, user_data, battle_enemy_key)
            if not battle_result:
                await update.message.reply_text("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤ –±–∏—Ç–≤–µ. –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
                user_data.clear()
                await start(update, context)
                return
            else:
                user_data["current_step"] = "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
                await update.message.reply_text("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±–∏—Ç–≤—É! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ.")
                await send_quest_step(update, user_data)
                return

    if text == "üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ":
        user_data["current_step"] = quest["start_step"]
        user_data["health"] = CHARACTERS["player"]["health"]
        user_data["damage_bonus"] = 0
        user_data["defense_bonus"] = 0
        user_data["inventory"] = []

    await send_quest_step(update, user_data)

async def send_quest_step(update: Update, user_data: dict) -> None:
    current_quest = user_data["current_quest"]
    current_step_key = user_data["current_step"]
    quest = QUESTS[current_quest]
    step = quest["steps"].get(current_step_key)

    if step is None:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –®–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    text = step["text"]
    options = step["options"]
    keyboard = [[option] for option in options]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    health = user_data.get("health", 100)
    inventory = user_data.get("inventory", [])
    status = f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health} | üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(inventory) if inventory else '–ø—É—Å—Ç–æ'}"
    await update.message.reply_text(status)
    await update.message.reply_text(text=text, reply_markup=reply_markup)

async def battle(update: Update, user_data: dict, enemy_key: str) -> bool:
    enemy = CHARACTERS[enemy_key].copy()
    player = {
        "health": user_data.get("health", 100),
        "damage_min": CHARACTERS["player"]["damage"][0] + user_data.get("damage_bonus", 0),
        "damage_max": CHARACTERS["player"]["damage"][1] + user_data.get("damage_bonus", 0),
        "defense": CHARACTERS["player"]["defense"] + user_data.get("defense_bonus", 0),
    }
    enemy_health = enemy["health"]
    enemy_defense = enemy["defense"]

    await update.message.reply_text(f"–ë–∏—Ç–≤–∞ –Ω–∞—á–∞–ª–∞—Å—å —Å {enemy_key.capitalize()}!")

    while player["health"] > 0 and enemy_health > 0:
        player_damage = random.randint(player["damage_min"], player["damage_max"]) - enemy_defense
        player_damage = max(0, player_damage)
        enemy_health -= player_damage
        await update.message.reply_text(f"–í—ã –Ω–∞–Ω–µ—Å–ª–∏ —É—Ä–æ–Ω {player_damage} –≤—Ä–∞–≥—É. –ó–¥–æ—Ä–æ–≤—å–µ –≤—Ä–∞–≥–∞: {max(enemy_health, 0)}")

        if enemy_health <= 0:
            break

        enemy_damage = random.randint(enemy["damage"][0], enemy["damage"][1]) - player["defense"]
        enemy_damage = max(0, enemy_damage)
        player["health"] -= enemy_damage
        await update.message.reply_text(f"–í—Ä–∞–≥ –Ω–∞–Ω—ë—Å —É—Ä–æ–Ω {enemy_damage}. –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ: {max(player['health'], 0)}")

    user_data["health"] = max(player["health"], 0)

    return user_data["health"] > 0

def main() -> None:
    TOKEN = "7567135692:AAGERrXNJ2-02yZwG4zo0g0i5i7DSoTYHz0"

    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("Bot is running...")
    application.run_polling()

if __name__ == '__main__':
    main()

